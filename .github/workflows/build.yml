name: Build Matrix (EXE + SCR)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    env:
      CONFIG: Release
      PLATFORM: Win32

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: MSVC dev cmd (x86 toolset for Win32)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Optional: version header from tag vMAJ.MIN.PAT
      - name: Generate version.h (from tag)
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          if [[ "$TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJ="${BASH_REMATCH[1]}"; MIN="${BASH_REMATCH[2]}"; PAT="${BASH_REMATCH[3]}"
            mkdir -p Matrix/resource
            cat > Matrix/resource/version.h <<EOF
          #define BUILD_MAJ $MAJ
          #define BUILD_MIN $MIN
          #define BUILD_PAT $PAT
          #define BUILD_NUM ${GITHUB_RUN_NUMBER}
          EOF
            echo "Wrote Matrix/resource/version.h"
          else
            echo "Tag not in vX.Y.Z; skipping version header."
          fi

      # Try MSBuild first (don’t fail job); always upload binlog
      - name: Build with MSBuild
        shell: pwsh
        continue-on-error: true
        run: |
          msbuild Matrix.sln /m `
            /p:Configuration=${{ env.CONFIG }} `
            /p:Platform=${{ env.PLATFORM }} `
            /bl:msbuild.binlog
          echo "MSBUILD_EXIT=$LASTEXITCODE" >> $env:GITHUB_ENV

      - name: Upload msbuild.binlog
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: msbuild.binlog
          path: msbuild.binlog
          if-no-files-found: ignore

      # Fallback: compile ALL sources + the correct RC path if MSBuild didn't produce an EXE
      - name: Fallback build with cl/rc (compile all sources)
        if: always()
        shell: pwsh
        run: |
          # If MSBuild already made an .exe, use it
          $exe = Get-ChildItem -Recurse -Filter *.exe -ErrorAction SilentlyContinue |
                 Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if ($exe) {
            Write-Host "MSBuild produced: $($exe.FullName) – skipping fallback."
            echo "OUT_EXE=$($exe.FullName)" >> $env:GITHUB_ENV
            exit 0
          }

          Write-Host "No EXE found; running fallback cl/rc compile…"

          # For debugging
          Get-ChildItem -Recurse -File | Out-String -Width 4096 | Out-File tree.txt

          # ✅ Correct resource path: Matrix\resource\Matrix.rc → Matrix\resource\Matrix.res
          rc /nologo /I Matrix\resource /fo Matrix\resource\Matrix.res Matrix\resource\Matrix.rc 2>&1 | Tee-Object -FilePath rc.log

          # Collect all .cpp files under Matrix\
          $cpps = (Get-ChildItem Matrix -Recurse -Include *.cpp | ForEach-Object { $_.FullName }) -join ' '
          if (-not $cpps) { throw "No .cpp files found in Matrix folder." }

          # Build (add common Win32 libs)
          cmd /c "cl /nologo /O2 /W3 /DUNICODE /D_UNICODE ^
            /I Matrix /I Matrix\resource ^
            $cpps Matrix\resource\Matrix.res ^
            user32.lib gdi32.lib comctl32.lib shell32.lib comdlg32.lib advapi32.lib ole32.lib oleaut32.lib uuid.lib ^
            /link /SUBSYSTEM:WINDOWS /OUT:matrix-win32.exe" 1> cl.log 2>&1

          if (!(Test-Path matrix-win32.exe)) {
            Write-Host "Fallback build failed. See rc.log / cl.log."
            throw "Fallback build failed"
          }
          echo "OUT_EXE=$((Resolve-Path matrix-win32.exe).Path)" >> $env:GITHUB_ENV

      - name: Upload fallback logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fallback-logs
          path: |
            tree.txt
            rc.log
            cl.log
          if-no-files-found: ignore

      - name: Package outputs
        shell: pwsh
        run: |
          if (-not $env:OUT_EXE) {
            $found = Get-ChildItem -Recurse -Filter *.exe | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($found) { $env:OUT_EXE = $found.FullName }
          }
          if (-not $env:OUT_EXE) { throw "Could not locate built .exe" }

          Write-Host "Using EXE: $env:OUT_EXE"
          New-Item -ItemType Directory -Force -Path out | Out-Null
          Copy-Item "$env:OUT_EXE" "out\matrix-win32.exe" -Force
          Copy-Item "$env:OUT_EXE" "out\matrix-win32.scr" -Force   # .scr is just the exe renamed

          $zip = "Matrix_${{ env.CONFIG }}_${{ env.PLATFORM }}.zip"
          $toZip = @("out\matrix-win32.exe","out\matrix-win32.scr")
          if (Test-Path LICENSE)   { $toZip += "LICENSE" }
          if (Test-Path README.md) { $toZip += "README.md" }
          Compress-Archive -Path $toZip -DestinationPath $zip -CompressionLevel Optimal
          echo "ZIP_NAME=$zip" >> $env:GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}

      - name: Attach to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
