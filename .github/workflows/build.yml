name: Build Matrix (EXE + SCR)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Release]
        platform: [Win32]   # ← VS projects usually use Win32, not x86

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Puts cl/rc/link on PATH (x86 toolset is fine for Win32 builds)
      - name: MSVC dev cmd
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Optional: write version.h from tag vMAJ.MIN.PAT when building a release
      - name: Generate version.h (from tag)
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          if [[ "$TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJ="${BASH_REMATCH[1]}"; MIN="${BASH_REMATCH[2]}"; PAT="${BASH_REMATCH[3]}"
            mkdir -p Matrix/resource
            cat > Matrix/resource/version.h <<EOF
          #define BUILD_MAJ $MAJ
          #define BUILD_MIN $MIN
          #define BUILD_PAT $PAT
          #define BUILD_NUM ${GITHUB_RUN_NUMBER}
          EOF
            echo "Wrote Matrix/resource/version.h"
          else
            echo "Tag not in vX.Y.Z form; skipping version header."
          fi

      - name: Build solution
        run: |
          msbuild Matrix.sln /m /p:Configuration=${{ matrix.config }} /p:Platform=${{ matrix.platform }}

      - name: Collect outputs (find EXE)
        shell: pwsh
        run: |
          # Search common output folders for newest EXE
          $candidates = @(
            "Matrix\${{ matrix.platform }}\${{ matrix.config }}\*.exe",
            "Matrix\${{ matrix.config }}\*.exe",
            "Matrix\bin\${{ matrix.platform }}\${{ matrix.config }}\*.exe",
            "bin\${{ matrix.platform }}\${{ matrix.config }}\*.exe",
            "**\${{ matrix.config }}\*.exe"
          )
          $exe = $null
          foreach ($pat in $candidates) {
            $found = Get-ChildItem -Path $pat -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($found) { $exe = $found.FullName; break }
          }
          if (-not $exe) {
            $found = Get-ChildItem -Recurse -Filter *.exe | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($found) { $exe = $found.FullName }
          }
          if (-not $exe) { throw "Could not locate built .exe. Check project output paths." }

          Write-Host "Found EXE: $exe"

          New-Item -ItemType Directory -Force -Path out | Out-Null
          Copy-Item $exe "out\matrix-win32.exe" -Force
          Copy-Item $exe "out\matrix-win32.scr" -Force  # screensavers are EXEs with .scr

          $zip = "Matrix_${{ matrix.config }}_${{ matrix.platform }}.zip"
          $toZip = @("out\matrix-win32.exe","out\matrix-win32.scr")
          if (Test-Path LICENSE)   { $toZip += "LICENSE" }
          if (Test-Path README.md) { $toZip += "README.md" }
          Compress-Archive -Path $toZip -DestinationPath $zip -CompressionLevel Optimal
          echo "ZIP_NAME=$zip" >> $env:GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}

      - name: Attach to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
